{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Qxxsm0b2TG9EHf2U1R4jxrHp2_KFsAYF","timestamp":1745248228204}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"DDHjthfvbeet"},"outputs":[],"source":["\n"]},{"cell_type":"code","source":["!pip install --upgrade vaderSentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UUBs4Z7hb0b8","executionInfo":{"status":"ok","timestamp":1745784743810,"user_tz":240,"elapsed":11707,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"00794062-bd42-466a-d50b-9ff8c614ea19"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting vaderSentiment\n","  Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl.metadata (572 bytes)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from vaderSentiment) (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (2025.1.31)\n","Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl (125 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.0/126.0 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: vaderSentiment\n","Successfully installed vaderSentiment-3.3.2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"k8_jj937m5E7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","\n","#using feminism reddit posts\n","df = pd.read_csv(\"feminism_data.csv\")\n","\n","#object like before to actually run sentiment analysis\n","analyzer = SentimentIntensityAnalyzer()\n"],"metadata":{"id":"dhH2CuUyZnMi","executionInfo":{"status":"ok","timestamp":1745784763870,"user_tz":240,"elapsed":50,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"BuuAyoKhclz3"}},{"cell_type":"code","source":["#to prevent type errors filling using fillna for empty\n","df['Title'] = df['Title'].fillna(\"\")\n","\n","#applying vader to each reddit post\n","vader_scores = df['Title'].apply(analyzer.polarity_scores)\n","vader_df = pd.DataFrame(list(vader_scores))\n","\n","#new dataframe to hold results and initial df\n","df_vader = pd.concat([df, vader_df], axis=1)\n","\n","def classify_sentiment(score):\n","    if score >= 0.05:\n","        return 'Positive'\n","    elif score <= -0.05:\n","        return 'Negative'\n","    else:\n","        return 'Neutral'\n","\n","df_vader['vader_sentiment'] = df_vader['compound'].apply(classify_sentiment)\n","\n","#testing by looking at the new df\n","print(df_vader[['Title', 'compound', 'vader_sentiment']].head(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6H3NxtmFbkUL","executionInfo":{"status":"ok","timestamp":1745784769227,"user_tz":240,"elapsed":111,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"75c7fe59-9966-46e2-cb8c-002a3629a1bf"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["                                               Title  compound vader_sentiment\n","0                    Some words from Maisie Williams    0.0000         Neutral\n","1                   This sadly happens all to often.   -0.4215        Negative\n","2                Religious bigots are just monsters.    0.0000         Neutral\n","3  This can never go away, this needs to continue...    0.1695        Positive\n","4                                           Abortion    0.0000         Neutral\n","5  Breonna Taylor was shot and killed in her SLEE...   -0.9108        Negative\n","6                                     About abortion    0.0000         Neutral\n","7  Hi i know this is a repost but i feel like the...    0.5023        Positive\n","8               This is one way you can be an ally 👏    0.0000         Neutral\n","9                          Brock \"The Rapist\" Turner   -0.7096        Negative\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"cTqMlW5YgFvj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#mean score acrossss all the tweets\n","average_compound = df_vader['compound'].mean()\n","\n","#made this function to find overall sentiment\n","def classify_overall(score):\n","    if score >= 0.05:\n","        return 'Overall Positive'\n","    elif score <= -0.05:\n","        return 'Overall Negative'\n","    else:\n","        return 'Overall Neutral'\n","\n","overall_sentiment = classify_overall(average_compound)\n","\n","#average score for each sentiment cateogry\n","avg_pos = df_vader['pos'].mean()\n","avg_neu = df_vader['neu'].mean()\n","avg_neg = df_vader['neg'].mean()\n","\n","\n","print(\"\\n--- Sentiment Summary Feminism---\")\n","print(f\"Average Compound Score: {average_compound:.4f}\")\n","print(f\"Overall Sentiment: {overall_sentiment}\")\n","print(f\"Average Positive Score: {avg_pos:.4f}\")\n","print(f\"Average Neutral Score:  {avg_neu:.4f}\")\n","print(f\"Average Negative Score: {avg_neg:.4f}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tHweuXKoanPx","executionInfo":{"status":"ok","timestamp":1745785598783,"user_tz":240,"elapsed":43,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"0004a564-777a-47a8-cf73-eb61114660f3"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Sentiment Summary Feminism---\n","Average Compound Score: -0.0580\n","Overall Sentiment: Overall Negative\n","Average Positive Score: 0.1027\n","Average Neutral Score:  0.7773\n","Average Negative Score: 0.1200\n"]}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","#counting up each category\n","sentiment_counts = df_vader['vader_sentiment'].value_counts().reindex(['Positive', 'Neutral', 'Negative'])\n","\n","\n","sns.barplot(x=sentiment_counts.index, y=sentiment_counts.values, palette='coolwarm')\n","plt.title('Reddit Post Sentiment Distribution')\n","plt.xlabel('Sentiment')\n","plt.ylabel('Number of Posts')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":579},"id":"XQ52xNEdYokE","executionInfo":{"status":"ok","timestamp":1745784790629,"user_tz":240,"elapsed":2923,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"e3fc3fa2-96a7-4580-c81e-b39f692d04fc"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-3fc9676ba429>:8: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x=sentiment_counts.index, y=sentiment_counts.values, palette='coolwarm')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#histogram for each score\n","sns.histplot(df_vader['compound'], bins=30, kde=True, color='skyblue')\n","plt.title('Distribution of VADER Compound Scores in Feminism')\n","plt.xlabel('Compound Sentiment Score')\n","plt.ylabel('Post Count')\n","plt.axvline(0, color='black', linestyle='--')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"izEF9yg2ZJih","executionInfo":{"status":"ok","timestamp":1745784796722,"user_tz":240,"elapsed":585,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"5e8ca5ac-181a-42a5-eaf5-be063cebf29a"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Ensure timestamp is datetime\n","df_vader['timestamp'] = pd.to_datetime(df_vader['timestamp'])\n","\n","# Optional: round to daily\n","df_vader['date'] = df_vader['timestamp'].dt.date\n","\n","# Average sentiment per day\n","daily_sentiment = df_vader.groupby('date')['compound'].mean().reset_index()\n","\n","# Plot\n","plt.figure(figsize=(12, 6))\n","sns.lineplot(x='date', y='compound', data=daily_sentiment)\n","plt.title('Average Sentiment Over Time')\n","plt.xlabel('Date')\n","plt.ylabel('Average Compound Score')\n","plt.axhline(0, color='gray', linestyle='--')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":547},"id":"RscgFGj7bonD","executionInfo":{"status":"error","timestamp":1745260660018,"user_tz":240,"elapsed":61,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"07fc5ff8-0ea7-4b99-9b7a-14a04a587a36"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"'timestamp'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'timestamp'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-f57ccd079c3d>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Ensure timestamp is datetime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf_vader\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'timestamp'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_vader\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'timestamp'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Optional: round to daily\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf_vader\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_vader\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'timestamp'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'timestamp'"]}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# fill missing\n","df_vader['Upvotes'] = df_vader['Upvotes'].fillna(0)\n","\n","# group by\n","vader_upvotes = df_vader.groupby('vader_sentiment')['Upvotes'].sum().sort_values(ascending=False)\n","vader_upvotes_df = vader_upvotes.reset_index()\n","\n","# Plot\n","plt.figure(figsize=(8, 5))\n","sns.barplot(x='vader_sentiment', y='Upvotes', data=vader_upvotes_df, palette='coolwarm')\n","\n","plt.title('Total Upvotes by Sentiment for Feminism')\n","plt.xlabel('VADER Sentiment')\n","plt.ylabel('Total Upvotes')\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"o6f0Tz5KUqYg","executionInfo":{"status":"ok","timestamp":1745523995593,"user_tz":240,"elapsed":171,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"61782809-f331-442e-ef1a-d73cfbfeff29"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-9-8b692d6e328f>:13: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x='vader_sentiment', y='Upvotes', data=vader_upvotes_df, palette='coolwarm')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"MDZtfqP7mq2A","executionInfo":{"status":"ok","timestamp":1745784759038,"user_tz":240,"elapsed":4366,"user":{"displayName":"Anika Kaur","userId":"11571894223681248703"}},"outputId":"a26d427b-2278-473b-ed7b-6104ccc695c2"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-ada0983a-bdb2-4068-8d95-07dba1fcf1b8\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-ada0983a-bdb2-4068-8d95-07dba1fcf1b8\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving feminism_data.csv to feminism_data.csv\n"]}]}]}